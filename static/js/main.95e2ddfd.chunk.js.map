{"version":3,"sources":["App.jsx","index.js"],"names":["accessKey","process","App","useState","images","setImages","page","setPage","query","setQuery","useEffect","getPhotos","apiUrl","fetch","then","res","json","data","imagesFromApi","results","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","dataLength","length","next","hasMore","loader","map","image","index","href","links","html","rel","src","urls","regular","alt","alt_description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAIMA,G,MAAYC,+CA0EHC,MAxEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKbC,qBAAU,WACRC,MAEC,CAACL,IAEJ,IAAMK,EAAY,WAEhB,IAAIC,EAAM,mCAEPJ,IAAOI,EAAM,uDAAmDJ,IAEnEI,GAAe,gBAAYN,GAC3BM,GAAe,qBAAiBZ,GAEhCa,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAU,IAAD,EACRC,EAAa,UAAGD,EAAKE,eAAR,QAAmBF,EAC1B,IAATX,GAAYD,EAAUa,GACzBb,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,YAA2Bc,WAkB3C,OACE,sBAAKE,UAAU,MAAf,UACE,yDAEA,uBAAMC,SAlBW,SAACC,GACpBA,EAAEC,iBACFhB,EAAQ,GACRI,KAeE,UACE,uBACEa,KAAK,OACLC,YAAY,qBACZC,MAAOlB,EACPmB,SAAU,SAACL,GAAD,OAAOb,EAASa,EAAEM,OAAOF,UACrC,+CAGF,cAAC,IAAD,CACEG,WAAYzB,EAAO0B,OACnBC,KAAM,kBAAMxB,GAAQ,SAACD,GAAD,OAAUA,EAAO,MACrC0B,SAAS,EACTC,OAAQ,4CAJV,SAKE,qBAAKb,UAAU,aAAf,SACGhB,EAAO8B,KAAI,SAACC,EAAOC,GAAR,OACV,mBAAGC,KAAMF,EAAMG,MAAMC,KAAMnB,UAAU,QAAoBQ,OAAO,SAASY,IAAI,sBAA7E,SACE,qBAAKC,IAAKN,EAAMO,KAAKC,QAASC,IAAKT,EAAMU,mBADOT,cC/D9DU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.95e2ddfd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport \"./App.css\"\n\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n\nfunction App() {\n  const [images, setImages] = useState([])\n  const [page, setPage] = useState(1)\n  const [query, setQuery] = useState('')\n\n  useEffect(() => {\n    getPhotos()\n    //es-lint-disable-next-line\n  }, [page])\n\n  const getPhotos = () => {\n\n    let apiUrl = `https://api.unsplash.com/photos?`\n\n    if(query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`\n\n    apiUrl = apiUrl + `&page=${page}`\n    apiUrl = apiUrl + `&client_id=${accessKey}`\n\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((data) => {\n        const imagesFromApi = data.results ?? data\n        if(page === 1) setImages(imagesFromApi)\n        setImages((images) => [...images, ...imagesFromApi])\n      })\n  }\n\n  const searchPhotos = (e) => {\n    e.preventDefault();\n    setPage(1)\n    getPhotos()\n  }\n\n  if (!accessKey) {\n    return (\n      <a href=\"https://unsplash.com/developers\" className=\"error\">\n        Required: Get Your Unsplash API KEY First\n      </a>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Unsplash Image Gallery!</h1>\n\n      <form onSubmit={searchPhotos}>\n        <input \n          type=\"text\" \n          placeholder=\"Search Unsplash...\" \n          value={query}\n          onChange={(e) => setQuery(e.target.value)}/>\n        <button>Search</button>\n      </form>\n\n      <InfiniteScroll\n        dataLength={images.length} //This is important field to render the next data\n        next={() => setPage((page) => page + 1)}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}>\n        <div className=\"image-grid\">\n          {images.map((image, index) => (\n            <a href={image.links.html} className=\"image\" key={index} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img src={image.urls.regular} alt={image.alt_description} />\n            </a>\n          ))}\n        </div>\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}